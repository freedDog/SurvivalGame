// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HallLoginMessage.proto

#ifndef PROTOBUF_HallLoginMessage_2eproto__INCLUDED
#define PROTOBUF_HallLoginMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Mid.pb.h"
// @@protoc_insertion_point(includes)

namespace PlatPmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HallLoginMessage_2eproto();
void protobuf_AssignDesc_HallLoginMessage_2eproto();
void protobuf_ShutdownFile_HallLoginMessage_2eproto();

class LoginRequest;
class LoginResponse;
class QuitRequest;
class QuitResponse;
class LoginSubGameRequest;
class LoginSubGameResponse;
class QuitSubGameRequest;
class QuitSubGameResponse;

enum LoginType {
  ACCOUNT = 1
};
bool LoginType_IsValid(int value);
const LoginType LoginType_MIN = ACCOUNT;
const LoginType LoginType_MAX = ACCOUNT;
const int LoginType_ARRAYSIZE = LoginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginType_descriptor();
inline const ::std::string& LoginType_Name(LoginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginType_descriptor(), value);
}
inline bool LoginType_Parse(
    const ::std::string& name, LoginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginType>(
    LoginType_descriptor(), name, value);
}
// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = LoginReq];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .PlatPmd.LoginType loginType = 4;
  inline bool has_logintype() const;
  inline void clear_logintype();
  static const int kLoginTypeFieldNumber = 4;
  inline ::PlatPmd::LoginType logintype() const;
  inline void set_logintype(::PlatPmd::LoginType value);

  // optional int64 sessionId = 5;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 5;
  inline ::google::protobuf::int64 sessionid() const;
  inline void set_sessionid(::google::protobuf::int64 value);

  // optional int32 gateId = 6;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateIdFieldNumber = 6;
  inline ::google::protobuf::int32 gateid() const;
  inline void set_gateid(::google::protobuf::int32 value);

  // optional string ip = 7;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 7;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:PlatPmd.LoginRequest)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_logintype();
  inline void clear_has_logintype();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int mid_;
  int logintype_;
  ::std::string* password_;
  ::google::protobuf::int64 sessionid_;
  ::std::string* ip_;
  ::std::string* version_;
  ::google::protobuf::int32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = LoginRes];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // optional bool isOk = 2;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsOkFieldNumber = 2;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional int64 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int64 rid = 4;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 4;
  inline ::google::protobuf::int64 rid() const;
  inline void set_rid(::google::protobuf::int64 value);

  // optional int64 sessionId = 5;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 5;
  inline ::google::protobuf::int64 sessionid() const;
  inline void set_sessionid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.LoginResponse)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int mid_;
  bool isok_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 rid_;
  ::google::protobuf::int64 sessionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class QuitRequest : public ::google::protobuf::Message {
 public:
  QuitRequest();
  virtual ~QuitRequest();

  QuitRequest(const QuitRequest& from);

  inline QuitRequest& operator=(const QuitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitRequest& default_instance();

  void Swap(QuitRequest* other);

  // implements Message ----------------------------------------------

  QuitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuitRequest& from);
  void MergeFrom(const QuitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = QuitReq];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // optional int64 rid = 2;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 2;
  inline ::google::protobuf::int64 rid() const;
  inline void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.QuitRequest)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_rid();
  inline void clear_has_rid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 rid_;
  int mid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static QuitRequest* default_instance_;
};
// -------------------------------------------------------------------

class QuitResponse : public ::google::protobuf::Message {
 public:
  QuitResponse();
  virtual ~QuitResponse();

  QuitResponse(const QuitResponse& from);

  inline QuitResponse& operator=(const QuitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitResponse& default_instance();

  void Swap(QuitResponse* other);

  // implements Message ----------------------------------------------

  QuitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuitResponse& from);
  void MergeFrom(const QuitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = QuitRes];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.QuitResponse)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int mid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static QuitResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoginSubGameRequest : public ::google::protobuf::Message {
 public:
  LoginSubGameRequest();
  virtual ~LoginSubGameRequest();

  LoginSubGameRequest(const LoginSubGameRequest& from);

  inline LoginSubGameRequest& operator=(const LoginSubGameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSubGameRequest& default_instance();

  void Swap(LoginSubGameRequest* other);

  // implements Message ----------------------------------------------

  LoginSubGameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginSubGameRequest& from);
  void MergeFrom(const LoginSubGameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = LoginSubGameReq];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // required int64 rid = 2;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 2;
  inline ::google::protobuf::int64 rid() const;
  inline void set_rid(::google::protobuf::int64 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 gameType = 4;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGameTypeFieldNumber = 4;
  inline ::google::protobuf::int32 gametype() const;
  inline void set_gametype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.LoginSubGameRequest)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gametype();
  inline void clear_has_gametype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 rid_;
  int mid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 gametype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LoginSubGameRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginSubGameResponse : public ::google::protobuf::Message {
 public:
  LoginSubGameResponse();
  virtual ~LoginSubGameResponse();

  LoginSubGameResponse(const LoginSubGameResponse& from);

  inline LoginSubGameResponse& operator=(const LoginSubGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSubGameResponse& default_instance();

  void Swap(LoginSubGameResponse* other);

  // implements Message ----------------------------------------------

  LoginSubGameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginSubGameResponse& from);
  void MergeFrom(const LoginSubGameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = LoginSubGameRes];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.LoginSubGameResponse)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int mid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LoginSubGameResponse* default_instance_;
};
// -------------------------------------------------------------------

class QuitSubGameRequest : public ::google::protobuf::Message {
 public:
  QuitSubGameRequest();
  virtual ~QuitSubGameRequest();

  QuitSubGameRequest(const QuitSubGameRequest& from);

  inline QuitSubGameRequest& operator=(const QuitSubGameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitSubGameRequest& default_instance();

  void Swap(QuitSubGameRequest* other);

  // implements Message ----------------------------------------------

  QuitSubGameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuitSubGameRequest& from);
  void MergeFrom(const QuitSubGameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = QuitSubGameReq];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // optional int64 rid = 2;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 2;
  inline ::google::protobuf::int64 rid() const;
  inline void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.QuitSubGameRequest)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_rid();
  inline void clear_has_rid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 rid_;
  int mid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static QuitSubGameRequest* default_instance_;
};
// -------------------------------------------------------------------

class QuitSubGameResponse : public ::google::protobuf::Message {
 public:
  QuitSubGameResponse();
  virtual ~QuitSubGameResponse();

  QuitSubGameResponse(const QuitSubGameResponse& from);

  inline QuitSubGameResponse& operator=(const QuitSubGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitSubGameResponse& default_instance();

  void Swap(QuitSubGameResponse* other);

  // implements Message ----------------------------------------------

  QuitSubGameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuitSubGameResponse& from);
  void MergeFrom(const QuitSubGameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlatPmd.MID mid = 1 [default = QuitSubGameRes];
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::PlatPmd::MID mid() const;
  inline void set_mid(::PlatPmd::MID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.QuitSubGameResponse)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int mid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_HallLoginMessage_2eproto();
  friend void protobuf_AssignDesc_HallLoginMessage_2eproto();
  friend void protobuf_ShutdownFile_HallLoginMessage_2eproto();

  void InitAsDefaultInstance();
  static QuitSubGameResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// optional .PlatPmd.MID mid = 1 [default = LoginReq];
inline bool LoginRequest::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_mid() {
  mid_ = 10001;
  clear_has_mid();
}
inline ::PlatPmd::MID LoginRequest::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void LoginRequest::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// optional string account = 2;
inline bool LoginRequest::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& LoginRequest::account() const {
  return *account_;
}
inline void LoginRequest::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void LoginRequest::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void LoginRequest::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* LoginRequest::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 3;
inline bool LoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginRequest::password() const {
  return *password_;
}
inline void LoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PlatPmd.LoginType loginType = 4;
inline bool LoginRequest::has_logintype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRequest::set_has_logintype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRequest::clear_has_logintype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRequest::clear_logintype() {
  logintype_ = 1;
  clear_has_logintype();
}
inline ::PlatPmd::LoginType LoginRequest::logintype() const {
  return static_cast< ::PlatPmd::LoginType >(logintype_);
}
inline void LoginRequest::set_logintype(::PlatPmd::LoginType value) {
  assert(::PlatPmd::LoginType_IsValid(value));
  set_has_logintype();
  logintype_ = value;
}

// optional int64 sessionId = 5;
inline bool LoginRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRequest::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::int64 LoginRequest::sessionid() const {
  return sessionid_;
}
inline void LoginRequest::set_sessionid(::google::protobuf::int64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional int32 gateId = 6;
inline bool LoginRequest::has_gateid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginRequest::set_has_gateid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginRequest::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginRequest::clear_gateid() {
  gateid_ = 0;
  clear_has_gateid();
}
inline ::google::protobuf::int32 LoginRequest::gateid() const {
  return gateid_;
}
inline void LoginRequest::set_gateid(::google::protobuf::int32 value) {
  set_has_gateid();
  gateid_ = value;
}

// optional string ip = 7;
inline bool LoginRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LoginRequest::ip() const {
  return *ip_;
}
inline void LoginRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* LoginRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string version = 8;
inline bool LoginRequest::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginRequest::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& LoginRequest::version() const {
  return *version_;
}
inline void LoginRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void LoginRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void LoginRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* LoginRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginResponse

// optional .PlatPmd.MID mid = 1 [default = LoginRes];
inline bool LoginResponse::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_mid() {
  mid_ = 10002;
  clear_has_mid();
}
inline ::PlatPmd::MID LoginResponse::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void LoginResponse::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// optional bool isOk = 2;
inline bool LoginResponse::has_isok() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_isok() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_isok() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool LoginResponse::isok() const {
  return isok_;
}
inline void LoginResponse::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
}

// optional int64 uid = 3;
inline bool LoginResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 LoginResponse::uid() const {
  return uid_;
}
inline void LoginResponse::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 rid = 4;
inline bool LoginResponse::has_rid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginResponse::set_has_rid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginResponse::clear_has_rid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginResponse::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::int64 LoginResponse::rid() const {
  return rid_;
}
inline void LoginResponse::set_rid(::google::protobuf::int64 value) {
  set_has_rid();
  rid_ = value;
}

// optional int64 sessionId = 5;
inline bool LoginResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginResponse::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::int64 LoginResponse::sessionid() const {
  return sessionid_;
}
inline void LoginResponse::set_sessionid(::google::protobuf::int64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// -------------------------------------------------------------------

// QuitRequest

// optional .PlatPmd.MID mid = 1 [default = QuitReq];
inline bool QuitRequest::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitRequest::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitRequest::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitRequest::clear_mid() {
  mid_ = 10007;
  clear_has_mid();
}
inline ::PlatPmd::MID QuitRequest::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void QuitRequest::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// optional int64 rid = 2;
inline bool QuitRequest::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuitRequest::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuitRequest::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuitRequest::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::int64 QuitRequest::rid() const {
  return rid_;
}
inline void QuitRequest::set_rid(::google::protobuf::int64 value) {
  set_has_rid();
  rid_ = value;
}

// -------------------------------------------------------------------

// QuitResponse

// optional .PlatPmd.MID mid = 1 [default = QuitRes];
inline bool QuitResponse::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitResponse::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitResponse::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitResponse::clear_mid() {
  mid_ = 10008;
  clear_has_mid();
}
inline ::PlatPmd::MID QuitResponse::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void QuitResponse::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// optional int32 result = 2;
inline bool QuitResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuitResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuitResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuitResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 QuitResponse::result() const {
  return result_;
}
inline void QuitResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// LoginSubGameRequest

// optional .PlatPmd.MID mid = 1 [default = LoginSubGameReq];
inline bool LoginSubGameRequest::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSubGameRequest::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSubGameRequest::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSubGameRequest::clear_mid() {
  mid_ = 10003;
  clear_has_mid();
}
inline ::PlatPmd::MID LoginSubGameRequest::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void LoginSubGameRequest::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// required int64 rid = 2;
inline bool LoginSubGameRequest::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSubGameRequest::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSubGameRequest::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSubGameRequest::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::int64 LoginSubGameRequest::rid() const {
  return rid_;
}
inline void LoginSubGameRequest::set_rid(::google::protobuf::int64 value) {
  set_has_rid();
  rid_ = value;
}

// optional int32 type = 3;
inline bool LoginSubGameRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginSubGameRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginSubGameRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginSubGameRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LoginSubGameRequest::type() const {
  return type_;
}
inline void LoginSubGameRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 gameType = 4;
inline bool LoginSubGameRequest::has_gametype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginSubGameRequest::set_has_gametype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginSubGameRequest::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginSubGameRequest::clear_gametype() {
  gametype_ = 0;
  clear_has_gametype();
}
inline ::google::protobuf::int32 LoginSubGameRequest::gametype() const {
  return gametype_;
}
inline void LoginSubGameRequest::set_gametype(::google::protobuf::int32 value) {
  set_has_gametype();
  gametype_ = value;
}

// -------------------------------------------------------------------

// LoginSubGameResponse

// optional .PlatPmd.MID mid = 1 [default = LoginSubGameRes];
inline bool LoginSubGameResponse::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSubGameResponse::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSubGameResponse::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSubGameResponse::clear_mid() {
  mid_ = 10004;
  clear_has_mid();
}
inline ::PlatPmd::MID LoginSubGameResponse::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void LoginSubGameResponse::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// optional int32 result = 2;
inline bool LoginSubGameResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSubGameResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSubGameResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSubGameResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginSubGameResponse::result() const {
  return result_;
}
inline void LoginSubGameResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// QuitSubGameRequest

// optional .PlatPmd.MID mid = 1 [default = QuitSubGameReq];
inline bool QuitSubGameRequest::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitSubGameRequest::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitSubGameRequest::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitSubGameRequest::clear_mid() {
  mid_ = 10009;
  clear_has_mid();
}
inline ::PlatPmd::MID QuitSubGameRequest::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void QuitSubGameRequest::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// optional int64 rid = 2;
inline bool QuitSubGameRequest::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuitSubGameRequest::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuitSubGameRequest::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuitSubGameRequest::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::int64 QuitSubGameRequest::rid() const {
  return rid_;
}
inline void QuitSubGameRequest::set_rid(::google::protobuf::int64 value) {
  set_has_rid();
  rid_ = value;
}

// -------------------------------------------------------------------

// QuitSubGameResponse

// optional .PlatPmd.MID mid = 1 [default = QuitSubGameRes];
inline bool QuitSubGameResponse::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitSubGameResponse::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitSubGameResponse::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitSubGameResponse::clear_mid() {
  mid_ = 10010;
  clear_has_mid();
}
inline ::PlatPmd::MID QuitSubGameResponse::mid() const {
  return static_cast< ::PlatPmd::MID >(mid_);
}
inline void QuitSubGameResponse::set_mid(::PlatPmd::MID value) {
  assert(::PlatPmd::MID_IsValid(value));
  set_has_mid();
  mid_ = value;
}

// optional int32 result = 2;
inline bool QuitSubGameResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuitSubGameResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuitSubGameResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuitSubGameResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 QuitSubGameResponse::result() const {
  return result_;
}
inline void QuitSubGameResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlatPmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlatPmd::LoginType>() {
  return ::PlatPmd::LoginType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HallLoginMessage_2eproto__INCLUDED
