// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SystemMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PlatPmd {

namespace {

const ::google::protobuf::Descriptor* SystemErrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemErrorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UdpConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UdpConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpConnectResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SystemErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SystemMessage_2eproto() {
  protobuf_AddDesc_SystemMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SystemMessage.proto");
  GOOGLE_CHECK(file != NULL);
  SystemErrorResponse_descriptor_ = file->message_type(0);
  static const int SystemErrorResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemErrorResponse, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemErrorResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemErrorResponse, msg_),
  };
  SystemErrorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemErrorResponse_descriptor_,
      SystemErrorResponse::default_instance_,
      SystemErrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemErrorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemErrorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemErrorResponse));
  HeartRequest_descriptor_ = file->message_type(1);
  static const int HeartRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, mid_),
  };
  HeartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartRequest_descriptor_,
      HeartRequest::default_instance_,
      HeartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartRequest));
  HeartResponse_descriptor_ = file->message_type(2);
  static const int HeartResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartResponse, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartResponse, servertime_),
  };
  HeartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartResponse_descriptor_,
      HeartResponse::default_instance_,
      HeartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartResponse));
  UdpConnectRequest_descriptor_ = file->message_type(3);
  static const int UdpConnectRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectRequest, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectRequest, rid_),
  };
  UdpConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdpConnectRequest_descriptor_,
      UdpConnectRequest::default_instance_,
      UdpConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdpConnectRequest));
  UdpConnectResponse_descriptor_ = file->message_type(4);
  static const int UdpConnectResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectResponse, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectResponse, result_),
  };
  UdpConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdpConnectResponse_descriptor_,
      UdpConnectResponse::default_instance_,
      UdpConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdpConnectResponse));
  SystemErrorCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SystemMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemErrorResponse_descriptor_, &SystemErrorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartRequest_descriptor_, &HeartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartResponse_descriptor_, &HeartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdpConnectRequest_descriptor_, &UdpConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdpConnectResponse_descriptor_, &UdpConnectResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SystemMessage_2eproto() {
  delete SystemErrorResponse::default_instance_;
  delete SystemErrorResponse_reflection_;
  delete HeartRequest::default_instance_;
  delete HeartRequest_reflection_;
  delete HeartResponse::default_instance_;
  delete HeartResponse_reflection_;
  delete UdpConnectRequest::default_instance_;
  delete UdpConnectRequest_reflection_;
  delete UdpConnectResponse::default_instance_;
  delete UdpConnectResponse_reflection_;
}

void protobuf_AddDesc_SystemMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PlatPmd::protobuf_AddDesc_Mid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SystemMessage.proto\022\007PlatPmd\032\tMid.prot"
    "o\"z\n\023SystemErrorResponse\022)\n\003mid\030\001 \001(\0162\014."
    "PlatPmd.MID:\016SystemErrorRes\022+\n\terrorCode"
    "\030\002 \001(\0162\030.PlatPmd.SystemErrorCode\022\013\n\003msg\030"
    "\003 \001(\t\"3\n\014HeartRequest\022#\n\003mid\030\001 \001(\0162\014.Pla"
    "tPmd.MID:\010HeartReq\"H\n\rHeartResponse\022#\n\003m"
    "id\030\001 \001(\0162\014.PlatPmd.MID:\010HeartRes\022\022\n\nserv"
    "erTime\030\002 \001(\003\"]\n\021UdpConnectRequest\022(\n\003mid"
    "\030\001 \001(\0162\014.PlatPmd.MID:\rUdpConnectReq\022\021\n\ts"
    "essionId\030\002 \001(\003\022\013\n\003rid\030\003 \001(\003\"N\n\022UdpConnec"
    "tResponse\022(\n\003mid\030\001 \001(\0162\014.PlatPmd.MID:\rUd"
    "pConnectRes\022\016\n\006result\030\002 \001(\005*D\n\017SystemErr"
    "orCode\022\017\n\013HallNotFind\020\001\022\017\n\013GameNotFind\020\002"
    "\022\017\n\013ConectReset\020\003", 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SystemMessage.proto", &protobuf_RegisterTypes);
  SystemErrorResponse::default_instance_ = new SystemErrorResponse();
  HeartRequest::default_instance_ = new HeartRequest();
  HeartResponse::default_instance_ = new HeartResponse();
  UdpConnectRequest::default_instance_ = new UdpConnectRequest();
  UdpConnectResponse::default_instance_ = new UdpConnectResponse();
  SystemErrorResponse::default_instance_->InitAsDefaultInstance();
  HeartRequest::default_instance_->InitAsDefaultInstance();
  HeartResponse::default_instance_->InitAsDefaultInstance();
  UdpConnectRequest::default_instance_->InitAsDefaultInstance();
  UdpConnectResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SystemMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SystemMessage_2eproto {
  StaticDescriptorInitializer_SystemMessage_2eproto() {
    protobuf_AddDesc_SystemMessage_2eproto();
  }
} static_descriptor_initializer_SystemMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* SystemErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemErrorCode_descriptor_;
}
bool SystemErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SystemErrorResponse::kMidFieldNumber;
const int SystemErrorResponse::kErrorCodeFieldNumber;
const int SystemErrorResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

SystemErrorResponse::SystemErrorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemErrorResponse::InitAsDefaultInstance() {
}

SystemErrorResponse::SystemErrorResponse(const SystemErrorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemErrorResponse::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 10006;
  errorcode_ = 1;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemErrorResponse::~SystemErrorResponse() {
  SharedDtor();
}

void SystemErrorResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void SystemErrorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemErrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemErrorResponse_descriptor_;
}

const SystemErrorResponse& SystemErrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemMessage_2eproto();
  return *default_instance_;
}

SystemErrorResponse* SystemErrorResponse::default_instance_ = NULL;

SystemErrorResponse* SystemErrorResponse::New() const {
  return new SystemErrorResponse;
}

void SystemErrorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 10006;
    errorcode_ = 1;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlatPmd.MID mid = 1 [default = SystemErrorRes];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlatPmd::MID_IsValid(value)) {
            set_mid(static_cast< ::PlatPmd::MID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errorCode;
        break;
      }

      // optional .PlatPmd.SystemErrorCode errorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlatPmd::SystemErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::PlatPmd::SystemErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlatPmd.MID mid = 1 [default = SystemErrorRes];
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .PlatPmd.SystemErrorCode errorCode = 2;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errorcode(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemErrorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlatPmd.MID mid = 1 [default = SystemErrorRes];
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mid(), target);
  }

  // optional .PlatPmd.SystemErrorCode errorCode = 2;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errorcode(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemErrorResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlatPmd.MID mid = 1 [default = SystemErrorRes];
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
    }

    // optional .PlatPmd.SystemErrorCode errorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemErrorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemErrorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemErrorResponse::MergeFrom(const SystemErrorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemErrorResponse::CopyFrom(const SystemErrorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemErrorResponse::IsInitialized() const {

  return true;
}

void SystemErrorResponse::Swap(SystemErrorResponse* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemErrorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemErrorResponse_descriptor_;
  metadata.reflection = SystemErrorResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartRequest::kMidFieldNumber;
#endif  // !_MSC_VER

HeartRequest::HeartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartRequest::InitAsDefaultInstance() {
}

HeartRequest::HeartRequest(const HeartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartRequest::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 10011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartRequest::~HeartRequest() {
  SharedDtor();
}

void HeartRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartRequest_descriptor_;
}

const HeartRequest& HeartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemMessage_2eproto();
  return *default_instance_;
}

HeartRequest* HeartRequest::default_instance_ = NULL;

HeartRequest* HeartRequest::New() const {
  return new HeartRequest;
}

void HeartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 10011;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlatPmd.MID mid = 1 [default = HeartReq];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlatPmd::MID_IsValid(value)) {
            set_mid(static_cast< ::PlatPmd::MID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlatPmd.MID mid = 1 [default = HeartReq];
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlatPmd.MID mid = 1 [default = HeartReq];
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlatPmd.MID mid = 1 [default = HeartReq];
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartRequest::MergeFrom(const HeartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartRequest::CopyFrom(const HeartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartRequest::IsInitialized() const {

  return true;
}

void HeartRequest::Swap(HeartRequest* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartRequest_descriptor_;
  metadata.reflection = HeartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartResponse::kMidFieldNumber;
const int HeartResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

HeartResponse::HeartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartResponse::InitAsDefaultInstance() {
}

HeartResponse::HeartResponse(const HeartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartResponse::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 10012;
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartResponse::~HeartResponse() {
  SharedDtor();
}

void HeartResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartResponse_descriptor_;
}

const HeartResponse& HeartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemMessage_2eproto();
  return *default_instance_;
}

HeartResponse* HeartResponse::default_instance_ = NULL;

HeartResponse* HeartResponse::New() const {
  return new HeartResponse;
}

void HeartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 10012;
    servertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlatPmd.MID mid = 1 [default = HeartRes];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlatPmd::MID_IsValid(value)) {
            set_mid(static_cast< ::PlatPmd::MID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverTime;
        break;
      }

      // optional int64 serverTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlatPmd.MID mid = 1 [default = HeartRes];
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int64 serverTime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlatPmd.MID mid = 1 [default = HeartRes];
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mid(), target);
  }

  // optional int64 serverTime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlatPmd.MID mid = 1 [default = HeartRes];
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
    }

    // optional int64 serverTime = 2;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartResponse::MergeFrom(const HeartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartResponse::CopyFrom(const HeartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartResponse::IsInitialized() const {

  return true;
}

void HeartResponse::Swap(HeartResponse* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartResponse_descriptor_;
  metadata.reflection = HeartResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UdpConnectRequest::kMidFieldNumber;
const int UdpConnectRequest::kSessionIdFieldNumber;
const int UdpConnectRequest::kRidFieldNumber;
#endif  // !_MSC_VER

UdpConnectRequest::UdpConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UdpConnectRequest::InitAsDefaultInstance() {
}

UdpConnectRequest::UdpConnectRequest(const UdpConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UdpConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 10013;
  sessionid_ = GOOGLE_LONGLONG(0);
  rid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpConnectRequest::~UdpConnectRequest() {
  SharedDtor();
}

void UdpConnectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UdpConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpConnectRequest_descriptor_;
}

const UdpConnectRequest& UdpConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemMessage_2eproto();
  return *default_instance_;
}

UdpConnectRequest* UdpConnectRequest::default_instance_ = NULL;

UdpConnectRequest* UdpConnectRequest::New() const {
  return new UdpConnectRequest;
}

void UdpConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 10013;
    sessionid_ = GOOGLE_LONGLONG(0);
    rid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdpConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlatPmd.MID mid = 1 [default = UdpConnectReq];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlatPmd::MID_IsValid(value)) {
            set_mid(static_cast< ::PlatPmd::MID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sessionId;
        break;
      }

      // optional int64 sessionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rid;
        break;
      }

      // optional int64 rid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UdpConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlatPmd.MID mid = 1 [default = UdpConnectReq];
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int64 sessionId = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sessionid(), output);
  }

  // optional int64 rid = 3;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UdpConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlatPmd.MID mid = 1 [default = UdpConnectReq];
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mid(), target);
  }

  // optional int64 sessionId = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sessionid(), target);
  }

  // optional int64 rid = 3;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UdpConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlatPmd.MID mid = 1 [default = UdpConnectReq];
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
    }

    // optional int64 sessionId = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }

    // optional int64 rid = 3;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdpConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdpConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdpConnectRequest::MergeFrom(const UdpConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdpConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpConnectRequest::CopyFrom(const UdpConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpConnectRequest::IsInitialized() const {

  return true;
}

void UdpConnectRequest::Swap(UdpConnectRequest* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdpConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpConnectRequest_descriptor_;
  metadata.reflection = UdpConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UdpConnectResponse::kMidFieldNumber;
const int UdpConnectResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UdpConnectResponse::UdpConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UdpConnectResponse::InitAsDefaultInstance() {
}

UdpConnectResponse::UdpConnectResponse(const UdpConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UdpConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 10014;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpConnectResponse::~UdpConnectResponse() {
  SharedDtor();
}

void UdpConnectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UdpConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpConnectResponse_descriptor_;
}

const UdpConnectResponse& UdpConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemMessage_2eproto();
  return *default_instance_;
}

UdpConnectResponse* UdpConnectResponse::default_instance_ = NULL;

UdpConnectResponse* UdpConnectResponse::New() const {
  return new UdpConnectResponse;
}

void UdpConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 10014;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdpConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlatPmd.MID mid = 1 [default = UdpConnectRes];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlatPmd::MID_IsValid(value)) {
            set_mid(static_cast< ::PlatPmd::MID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UdpConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlatPmd.MID mid = 1 [default = UdpConnectRes];
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UdpConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlatPmd.MID mid = 1 [default = UdpConnectRes];
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UdpConnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlatPmd.MID mid = 1 [default = UdpConnectRes];
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdpConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdpConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdpConnectResponse::MergeFrom(const UdpConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdpConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpConnectResponse::CopyFrom(const UdpConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpConnectResponse::IsInitialized() const {

  return true;
}

void UdpConnectResponse::Swap(UdpConnectResponse* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdpConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpConnectResponse_descriptor_;
  metadata.reflection = UdpConnectResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlatPmd

// @@protoc_insertion_point(global_scope)
