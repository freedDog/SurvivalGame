// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: talkbox.proto

#ifndef PROTOBUF_INCLUDED_talkbox_2eproto
#define PROTOBUF_INCLUDED_talkbox_2eproto

#include <limits>
#include <string>


#include <google/protobuf/stubs/common.h>
#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_talkbox_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_talkbox_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_talkbox_2eproto();
namespace talkbox {
class talk_create;
class talk_createDefaultTypeInternal;
extern talk_createDefaultTypeInternal _talk_create_default_instance_;
class talk_message;
class talk_messageDefaultTypeInternal;
extern talk_messageDefaultTypeInternal _talk_message_default_instance_;
class talk_result;
class talk_resultDefaultTypeInternal;
extern talk_resultDefaultTypeInternal _talk_result_default_instance_;
class talk_users;
class talk_usersDefaultTypeInternal;
extern talk_usersDefaultTypeInternal _talk_users_default_instance_;
class talk_users_talk_user;
class talk_users_talk_userDefaultTypeInternal;
extern talk_users_talk_userDefaultTypeInternal _talk_users_talk_user_default_instance_;
}  // namespace talkbox
namespace google {
namespace protobuf {
template<> ::talkbox::talk_create* Arena::CreateMaybeMessage<::talkbox::talk_create>(Arena*);
template<> ::talkbox::talk_message* Arena::CreateMaybeMessage<::talkbox::talk_message>(Arena*);
template<> ::talkbox::talk_result* Arena::CreateMaybeMessage<::talkbox::talk_result>(Arena*);
template<> ::talkbox::talk_users* Arena::CreateMaybeMessage<::talkbox::talk_users>(Arena*);
template<> ::talkbox::talk_users_talk_user* Arena::CreateMaybeMessage<::talkbox::talk_users_talk_user>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace talkbox {

// ===================================================================

class talk_result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:talkbox.talk_result) */ {
 public:
  talk_result();
  virtual ~talk_result();

  talk_result(const talk_result& from);

  inline talk_result& operator=(const talk_result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  talk_result(talk_result&& from) noexcept
    : talk_result() {
    *this = ::std::move(from);
  }

  inline talk_result& operator=(talk_result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const talk_result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const talk_result* internal_default_instance() {
    return reinterpret_cast<const talk_result*>(
               &_talk_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(talk_result* other);
  friend void swap(talk_result& a, talk_result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline talk_result* New() const final {
    return CreateMaybeMessage<talk_result>(NULL);
  }

  talk_result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<talk_result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const talk_result& from);
  void MergeFrom(const talk_result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(talk_result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:talkbox.talk_result)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_talkbox_2eproto;
};
// -------------------------------------------------------------------

class talk_create : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:talkbox.talk_create) */ {
 public:
  talk_create();
  virtual ~talk_create();

  talk_create(const talk_create& from);

  inline talk_create& operator=(const talk_create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  talk_create(talk_create&& from) noexcept
    : talk_create() {
    *this = ::std::move(from);
  }

  inline talk_create& operator=(talk_create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const talk_create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const talk_create* internal_default_instance() {
    return reinterpret_cast<const talk_create*>(
               &_talk_create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(talk_create* other);
  friend void swap(talk_create& a, talk_create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline talk_create* New() const final {
    return CreateMaybeMessage<talk_create>(NULL);
  }

  talk_create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<talk_create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const talk_create& from);
  void MergeFrom(const talk_create& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(talk_create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:talkbox.talk_create)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_talkbox_2eproto;
};
// -------------------------------------------------------------------

class talk_users_talk_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:talkbox.talk_users.talk_user) */ {
 public:
  talk_users_talk_user();
  virtual ~talk_users_talk_user();

  talk_users_talk_user(const talk_users_talk_user& from);

  inline talk_users_talk_user& operator=(const talk_users_talk_user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  talk_users_talk_user(talk_users_talk_user&& from) noexcept
    : talk_users_talk_user() {
    *this = ::std::move(from);
  }

  inline talk_users_talk_user& operator=(talk_users_talk_user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const talk_users_talk_user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const talk_users_talk_user* internal_default_instance() {
    return reinterpret_cast<const talk_users_talk_user*>(
               &_talk_users_talk_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(talk_users_talk_user* other);
  friend void swap(talk_users_talk_user& a, talk_users_talk_user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline talk_users_talk_user* New() const final {
    return CreateMaybeMessage<talk_users_talk_user>(NULL);
  }

  talk_users_talk_user* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<talk_users_talk_user>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const talk_users_talk_user& from);
  void MergeFrom(const talk_users_talk_user& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(talk_users_talk_user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:talkbox.talk_users.talk_user)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_talkbox_2eproto;
};
// -------------------------------------------------------------------

class talk_users : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:talkbox.talk_users) */ {
 public:
  talk_users();
  virtual ~talk_users();

  talk_users(const talk_users& from);

  inline talk_users& operator=(const talk_users& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  talk_users(talk_users&& from) noexcept
    : talk_users() {
    *this = ::std::move(from);
  }

  inline talk_users& operator=(talk_users&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const talk_users& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const talk_users* internal_default_instance() {
    return reinterpret_cast<const talk_users*>(
               &_talk_users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(talk_users* other);
  friend void swap(talk_users& a, talk_users& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline talk_users* New() const final {
    return CreateMaybeMessage<talk_users>(NULL);
  }

  talk_users* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<talk_users>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const talk_users& from);
  void MergeFrom(const talk_users& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(talk_users* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef talk_users_talk_user talk_user;

  // accessors -------------------------------------------------------

  // repeated .talkbox.talk_users.talk_user users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::talkbox::talk_users_talk_user* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >*
      mutable_users();
  const ::talkbox::talk_users_talk_user& users(int index) const;
  ::talkbox::talk_users_talk_user* add_users();
  const ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >&
      users() const;

  // @@protoc_insertion_point(class_scope:talkbox.talk_users)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user > users_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_talkbox_2eproto;
};
// -------------------------------------------------------------------

class talk_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:talkbox.talk_message) */ {
 public:
  talk_message();
  virtual ~talk_message();

  talk_message(const talk_message& from);

  inline talk_message& operator=(const talk_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  talk_message(talk_message&& from) noexcept
    : talk_message() {
    *this = ::std::move(from);
  }

  inline talk_message& operator=(talk_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const talk_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const talk_message* internal_default_instance() {
    return reinterpret_cast<const talk_message*>(
               &_talk_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(talk_message* other);
  friend void swap(talk_message& a, talk_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline talk_message* New() const final {
    return CreateMaybeMessage<talk_message>(NULL);
  }

  talk_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<talk_message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const talk_message& from);
  void MergeFrom(const talk_message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(talk_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 fromuserid = 1;
  void clear_fromuserid();
  static const int kFromuseridFieldNumber = 1;
  ::google::protobuf::int32 fromuserid() const;
  void set_fromuserid(::google::protobuf::int32 value);

  // int32 touserid = 2;
  void clear_touserid();
  static const int kTouseridFieldNumber = 2;
  ::google::protobuf::int32 touserid() const;
  void set_touserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:talkbox.talk_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 fromuserid_;
  ::google::protobuf::int32 touserid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_talkbox_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// talk_result

// int32 id = 1;
inline void talk_result::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 talk_result::id() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_result.id)
  return id_;
}
inline void talk_result::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:talkbox.talk_result.id)
}

// -------------------------------------------------------------------

// talk_create

// int32 userid = 1;
inline void talk_create::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 talk_create::userid() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_create.userid)
  return userid_;
}
inline void talk_create::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:talkbox.talk_create.userid)
}

// string name = 2;
inline void talk_create::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& talk_create::name() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_create.name)
  return name_.GetNoArena();
}
inline void talk_create::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:talkbox.talk_create.name)
}
#if LANG_CXX11
inline void talk_create::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:talkbox.talk_create.name)
}
#endif
inline void talk_create::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:talkbox.talk_create.name)
}
inline void talk_create::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:talkbox.talk_create.name)
}
inline ::std::string* talk_create::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:talkbox.talk_create.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* talk_create::release_name() {
  // @@protoc_insertion_point(field_release:talkbox.talk_create.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void talk_create::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:talkbox.talk_create.name)
}

// -------------------------------------------------------------------

// talk_users_talk_user

// int32 userid = 1;
inline void talk_users_talk_user::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 talk_users_talk_user::userid() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_users.talk_user.userid)
  return userid_;
}
inline void talk_users_talk_user::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:talkbox.talk_users.talk_user.userid)
}

// string name = 2;
inline void talk_users_talk_user::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& talk_users_talk_user::name() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_users.talk_user.name)
  return name_.GetNoArena();
}
inline void talk_users_talk_user::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:talkbox.talk_users.talk_user.name)
}
#if LANG_CXX11
inline void talk_users_talk_user::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:talkbox.talk_users.talk_user.name)
}
#endif
inline void talk_users_talk_user::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:talkbox.talk_users.talk_user.name)
}
inline void talk_users_talk_user::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:talkbox.talk_users.talk_user.name)
}
inline ::std::string* talk_users_talk_user::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:talkbox.talk_users.talk_user.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* talk_users_talk_user::release_name() {
  // @@protoc_insertion_point(field_release:talkbox.talk_users.talk_user.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void talk_users_talk_user::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:talkbox.talk_users.talk_user.name)
}

// -------------------------------------------------------------------

// talk_users

// repeated .talkbox.talk_users.talk_user users = 1;
inline int talk_users::users_size() const {
  return users_.size();
}
inline void talk_users::clear_users() {
  users_.Clear();
}
inline ::talkbox::talk_users_talk_user* talk_users::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:talkbox.talk_users.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >*
talk_users::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:talkbox.talk_users.users)
  return &users_;
}
inline const ::talkbox::talk_users_talk_user& talk_users::users(int index) const {
  // @@protoc_insertion_point(field_get:talkbox.talk_users.users)
  return users_.Get(index);
}
inline ::talkbox::talk_users_talk_user* talk_users::add_users() {
  // @@protoc_insertion_point(field_add:talkbox.talk_users.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >&
talk_users::users() const {
  // @@protoc_insertion_point(field_list:talkbox.talk_users.users)
  return users_;
}

// -------------------------------------------------------------------

// talk_message

// int32 fromuserid = 1;
inline void talk_message::clear_fromuserid() {
  fromuserid_ = 0;
}
inline ::google::protobuf::int32 talk_message::fromuserid() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_message.fromuserid)
  return fromuserid_;
}
inline void talk_message::set_fromuserid(::google::protobuf::int32 value) {
  
  fromuserid_ = value;
  // @@protoc_insertion_point(field_set:talkbox.talk_message.fromuserid)
}

// int32 touserid = 2;
inline void talk_message::clear_touserid() {
  touserid_ = 0;
}
inline ::google::protobuf::int32 talk_message::touserid() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_message.touserid)
  return touserid_;
}
inline void talk_message::set_touserid(::google::protobuf::int32 value) {
  
  touserid_ = value;
  // @@protoc_insertion_point(field_set:talkbox.talk_message.touserid)
}

// string msg = 3;
inline void talk_message::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& talk_message::msg() const {
  // @@protoc_insertion_point(field_get:talkbox.talk_message.msg)
  return msg_.GetNoArena();
}
inline void talk_message::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:talkbox.talk_message.msg)
}
#if LANG_CXX11
inline void talk_message::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:talkbox.talk_message.msg)
}
#endif
inline void talk_message::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:talkbox.talk_message.msg)
}
inline void talk_message::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:talkbox.talk_message.msg)
}
inline ::std::string* talk_message::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:talkbox.talk_message.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* talk_message::release_msg() {
  // @@protoc_insertion_point(field_release:talkbox.talk_message.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void talk_message::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:talkbox.talk_message.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace talkbox

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_talkbox_2eproto
