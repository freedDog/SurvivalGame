// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HallLoginMessage.proto

#include "HallLoginMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace GameMessage {
class LoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
class QuitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuitRequest> _instance;
} _QuitRequest_default_instance_;
class QuitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuitResponse> _instance;
} _QuitResponse_default_instance_;
class LoginSubGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginSubGameRequest> _instance;
} _LoginSubGameRequest_default_instance_;
class LoginSubGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginSubGameResponse> _instance;
} _LoginSubGameResponse_default_instance_;
class QuitSubGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuitSubGameRequest> _instance;
} _QuitSubGameRequest_default_instance_;
class QuitSubGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuitSubGameResponse> _instance;
} _QuitSubGameResponse_default_instance_;
}  // namespace GameMessage
static void InitDefaultsLoginRequest_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_LoginRequest_default_instance_;
    new (ptr) ::GameMessage::LoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::LoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginRequest_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginRequest_HallLoginMessage_2eproto}, {}};

static void InitDefaultsLoginResponse_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_LoginResponse_default_instance_;
    new (ptr) ::GameMessage::LoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::LoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginResponse_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginResponse_HallLoginMessage_2eproto}, {}};

static void InitDefaultsQuitRequest_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_QuitRequest_default_instance_;
    new (ptr) ::GameMessage::QuitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::QuitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QuitRequest_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuitRequest_HallLoginMessage_2eproto}, {}};

static void InitDefaultsQuitResponse_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_QuitResponse_default_instance_;
    new (ptr) ::GameMessage::QuitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::QuitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QuitResponse_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuitResponse_HallLoginMessage_2eproto}, {}};

static void InitDefaultsLoginSubGameRequest_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_LoginSubGameRequest_default_instance_;
    new (ptr) ::GameMessage::LoginSubGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::LoginSubGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginSubGameRequest_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginSubGameRequest_HallLoginMessage_2eproto}, {}};

static void InitDefaultsLoginSubGameResponse_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_LoginSubGameResponse_default_instance_;
    new (ptr) ::GameMessage::LoginSubGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::LoginSubGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginSubGameResponse_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginSubGameResponse_HallLoginMessage_2eproto}, {}};

static void InitDefaultsQuitSubGameRequest_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_QuitSubGameRequest_default_instance_;
    new (ptr) ::GameMessage::QuitSubGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::QuitSubGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QuitSubGameRequest_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuitSubGameRequest_HallLoginMessage_2eproto}, {}};

static void InitDefaultsQuitSubGameResponse_HallLoginMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMessage::_QuitSubGameResponse_default_instance_;
    new (ptr) ::GameMessage::QuitSubGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::QuitSubGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QuitSubGameResponse_HallLoginMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuitSubGameResponse_HallLoginMessage_2eproto}, {}};

void InitDefaults_HallLoginMessage_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRequest_HallLoginMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginResponse_HallLoginMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuitRequest_HallLoginMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuitResponse_HallLoginMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginSubGameRequest_HallLoginMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginSubGameResponse_HallLoginMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuitSubGameRequest_HallLoginMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuitSubGameResponse_HallLoginMessage_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_HallLoginMessage_2eproto[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_HallLoginMessage_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_HallLoginMessage_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_HallLoginMessage_2eproto::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, logintype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, gateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginRequest, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginResponse, isok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginResponse, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginResponse, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginResponse, sessionid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitRequest, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitRequest, rid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitResponse, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameRequest, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameRequest, gametype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::LoginSubGameResponse, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitSubGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitSubGameRequest, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitSubGameRequest, rid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitSubGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitSubGameResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameMessage::QuitSubGameResponse, result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameMessage::LoginRequest)},
  { 13, -1, sizeof(::GameMessage::LoginResponse)},
  { 23, -1, sizeof(::GameMessage::QuitRequest)},
  { 30, -1, sizeof(::GameMessage::QuitResponse)},
  { 37, -1, sizeof(::GameMessage::LoginSubGameRequest)},
  { 46, -1, sizeof(::GameMessage::LoginSubGameResponse)},
  { 53, -1, sizeof(::GameMessage::QuitSubGameRequest)},
  { 60, -1, sizeof(::GameMessage::QuitSubGameResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_QuitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_QuitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_LoginSubGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_LoginSubGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_QuitSubGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMessage::_QuitSubGameResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_HallLoginMessage_2eproto = {
  {}, AddDescriptors_HallLoginMessage_2eproto, "HallLoginMessage.proto", schemas,
  file_default_instances, TableStruct_HallLoginMessage_2eproto::offsets,
  file_level_metadata_HallLoginMessage_2eproto, 8, file_level_enum_descriptors_HallLoginMessage_2eproto, file_level_service_descriptors_HallLoginMessage_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_HallLoginMessage_2eproto = {
  false, InitDefaults_HallLoginMessage_2eproto, 
  "\n\026HallLoginMessage.proto\022\013GameMessage\"\253\001"
  "\n\014LoginRequest\022\r\n\005msgId\030\001 \001(\005\022\017\n\007account"
  "\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022)\n\tloginType\030\004 "
  "\001(\0162\026.GameMessage.LoginType\022\021\n\tsessionId"
  "\030\005 \001(\003\022\016\n\006gateId\030\006 \001(\005\022\n\n\002ip\030\007 \001(\t\022\017\n\007ve"
  "rsion\030\010 \001(\t\"Y\n\rLoginResponse\022\r\n\005msgId\030\001 "
  "\001(\005\022\014\n\004isOk\030\002 \001(\010\022\013\n\003uid\030\003 \001(\003\022\013\n\003rid\030\004 "
  "\001(\003\022\021\n\tsessionId\030\005 \001(\003\")\n\013QuitRequest\022\r\n"
  "\005msgId\030\001 \001(\005\022\013\n\003rid\030\002 \001(\003\"-\n\014QuitRespons"
  "e\022\r\n\005msgId\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\"Q\n\023Logi"
  "nSubGameRequest\022\r\n\005msgId\030\001 \001(\005\022\013\n\003rid\030\002 "
  "\001(\003\022\014\n\004type\030\003 \001(\005\022\020\n\010gameType\030\004 \001(\005\"5\n\024L"
  "oginSubGameResponse\022\r\n\005msgId\030\001 \001(\005\022\016\n\006re"
  "sult\030\002 \001(\005\"0\n\022QuitSubGameRequest\022\r\n\005msgI"
  "d\030\001 \001(\005\022\013\n\003rid\030\002 \001(\003\"4\n\023QuitSubGameRespo"
  "nse\022\r\n\005msgId\030\001 \001(\005\022\016\n\006result\030\002 \001(\005*\030\n\tLo"
  "ginType\022\013\n\007ACCOUNT\020\000b\006proto3"
,
  "HallLoginMessage.proto", &assign_descriptors_table_HallLoginMessage_2eproto, 668,
};

void AddDescriptors_HallLoginMessage_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_HallLoginMessage_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_HallLoginMessage_2eproto = []() { AddDescriptors_HallLoginMessage_2eproto(); return true; }();
namespace GameMessage {
const ::google::protobuf::EnumDescriptor* LoginType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_HallLoginMessage_2eproto);
  return file_level_enum_descriptors_HallLoginMessage_2eproto[0];
}
bool LoginType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
class LoginRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kMsgIdFieldNumber;
const int LoginRequest::kAccountFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
const int LoginRequest::kLoginTypeFieldNumber;
const int LoginRequest::kSessionIdFieldNumber;
const int LoginRequest::kGateIdFieldNumber;
const int LoginRequest::kIpFieldNumber;
const int LoginRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gateid_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(gateid_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoginRequest_HallLoginMessage_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gateid_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(gateid_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:GameMessage.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginRequest_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gateid_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(gateid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // string account = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("GameMessage.LoginRequest.account");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_account();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // string password = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("GameMessage.LoginRequest.password");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_password();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .GameMessage.LoginType loginType = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::GameMessage::LoginType value = static_cast<::GameMessage::LoginType>(val);
        msg->set_logintype(value);
        break;
      }
      // int64 sessionId = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_sessionid(value);
        break;
      }
      // int32 gateId = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_gateid(value);
        break;
      }
      // string ip = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("GameMessage.LoginRequest.ip");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_ip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // string version = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("GameMessage.LoginRequest.version");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_version();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameMessage.LoginRequest.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameMessage.LoginRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameMessage.LoginType loginType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_logintype(static_cast< ::GameMessage::LoginType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sessionId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gateId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameMessage.LoginRequest.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameMessage.LoginRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LoginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // .GameMessage.LoginType loginType = 4;
  if (this->logintype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->logintype(), output);
  }

  // int64 sessionId = 5;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sessionid(), output);
  }

  // int32 gateId = 6;
  if (this->gateid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gateid(), output);
  }

  // string ip = 7;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ip(), output);
  }

  // string version = 8;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // .GameMessage.LoginType loginType = 4;
  if (this->logintype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->logintype(), target);
  }

  // int64 sessionId = 5;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sessionid(), target);
  }

  // int32 gateId = 6;
  if (this->gateid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gateid(), target);
  }

  // string ip = 7;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // string version = 8;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameMessage.LoginRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string ip = 7;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string version = 8;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  // .GameMessage.LoginType loginType = 4;
  if (this->logintype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logintype());
  }

  // int64 sessionId = 5;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  // int32 gateId = 6;
  if (this->gateid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gateid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.logintype() != 0) {
    set_logintype(from.logintype());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.gateid() != 0) {
    set_gateid(from.gateid());
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgid_, other->msgid_);
  swap(logintype_, other->logintype_);
  swap(sessionid_, other->sessionid_);
  swap(gateid_, other->gateid_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
}
class LoginResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kMsgIdFieldNumber;
const int LoginResponse::kIsOkFieldNumber;
const int LoginResponse::kUidFieldNumber;
const int LoginResponse::kRidFieldNumber;
const int LoginResponse::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(sessionid_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:GameMessage.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginResponse_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(sessionid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // bool isOk = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_isok(value);
        break;
      }
      // int64 uid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_uid(value);
        break;
      }
      // int64 rid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_rid(value);
        break;
      }
      // int64 sessionId = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_sessionid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sessionId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LoginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // bool isOk = 2;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isok(), output);
  }

  // int64 uid = 3;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }

  // int64 rid = 4;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rid(), output);
  }

  // int64 sessionId = 5;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // bool isOk = 2;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isok(), target);
  }

  // int64 uid = 3;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }

  // int64 rid = 4;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rid(), target);
  }

  // int64 sessionId = 5;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  // bool isOk = 2;
  if (this->isok() != 0) {
    total_size += 1 + 1;
  }

  // int64 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // int64 rid = 4;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rid());
  }

  // int64 sessionId = 5;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msgid_, other->msgid_);
  swap(isok_, other->isok_);
  swap(uid_, other->uid_);
  swap(rid_, other->rid_);
  swap(sessionid_, other->sessionid_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuitRequest::InitAsDefaultInstance() {
}
class QuitRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitRequest::kMsgIdFieldNumber;
const int QuitRequest::kRidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitRequest::QuitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.QuitRequest)
}
QuitRequest::QuitRequest(const QuitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&rid_)) + sizeof(msgid_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.QuitRequest)
}

void QuitRequest::SharedCtor() {
  ::memset(&rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&rid_)) + sizeof(msgid_));
}

QuitRequest::~QuitRequest() {
  // @@protoc_insertion_point(destructor:GameMessage.QuitRequest)
  SharedDtor();
}

void QuitRequest::SharedDtor() {
}

void QuitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitRequest& QuitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuitRequest_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void QuitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.QuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&rid_)) + sizeof(msgid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuitRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // int64 rid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_rid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.QuitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.QuitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.QuitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.QuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // int64 rid = 2;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.QuitRequest)
}

::google::protobuf::uint8* QuitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.QuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // int64 rid = 2;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.QuitRequest)
  return target;
}

size_t QuitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.QuitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 rid = 2;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rid());
  }

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.QuitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<QuitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.QuitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.QuitRequest)
    MergeFrom(*source);
  }
}

void QuitRequest::MergeFrom(const QuitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.QuitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
}

void QuitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.QuitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitRequest::CopyFrom(const QuitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.QuitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitRequest::IsInitialized() const {
  return true;
}

void QuitRequest::Swap(QuitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitRequest::InternalSwap(QuitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rid_, other->rid_);
  swap(msgid_, other->msgid_);
}

::google::protobuf::Metadata QuitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuitResponse::InitAsDefaultInstance() {
}
class QuitResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitResponse::kMsgIdFieldNumber;
const int QuitResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitResponse::QuitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.QuitResponse)
}
QuitResponse::QuitResponse(const QuitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.QuitResponse)
}

void QuitResponse::SharedCtor() {
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
}

QuitResponse::~QuitResponse() {
  // @@protoc_insertion_point(destructor:GameMessage.QuitResponse)
  SharedDtor();
}

void QuitResponse::SharedDtor() {
}

void QuitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitResponse& QuitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuitResponse_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void QuitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.QuitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuitResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // int32 result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.QuitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.QuitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.QuitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.QuitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.QuitResponse)
}

::google::protobuf::uint8* QuitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.QuitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.QuitResponse)
  return target;
}

size_t QuitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.QuitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.QuitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<QuitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.QuitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.QuitResponse)
    MergeFrom(*source);
  }
}

void QuitResponse::MergeFrom(const QuitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.QuitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void QuitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.QuitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitResponse::CopyFrom(const QuitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.QuitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitResponse::IsInitialized() const {
  return true;
}

void QuitResponse::Swap(QuitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitResponse::InternalSwap(QuitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msgid_, other->msgid_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata QuitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginSubGameRequest::InitAsDefaultInstance() {
}
class LoginSubGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginSubGameRequest::kMsgIdFieldNumber;
const int LoginSubGameRequest::kRidFieldNumber;
const int LoginSubGameRequest::kTypeFieldNumber;
const int LoginSubGameRequest::kGameTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginSubGameRequest::LoginSubGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LoginSubGameRequest)
}
LoginSubGameRequest::LoginSubGameRequest(const LoginSubGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gametype_) -
    reinterpret_cast<char*>(&rid_)) + sizeof(gametype_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.LoginSubGameRequest)
}

void LoginSubGameRequest::SharedCtor() {
  ::memset(&rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gametype_) -
      reinterpret_cast<char*>(&rid_)) + sizeof(gametype_));
}

LoginSubGameRequest::~LoginSubGameRequest() {
  // @@protoc_insertion_point(destructor:GameMessage.LoginSubGameRequest)
  SharedDtor();
}

void LoginSubGameRequest::SharedDtor() {
}

void LoginSubGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginSubGameRequest& LoginSubGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginSubGameRequest_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void LoginSubGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LoginSubGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gametype_) -
      reinterpret_cast<char*>(&rid_)) + sizeof(gametype_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginSubGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginSubGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // int64 rid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_rid(value);
        break;
      }
      // int32 type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // int32 gameType = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_gametype(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginSubGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LoginSubGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gameType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LoginSubGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LoginSubGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginSubGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LoginSubGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // int64 rid = 2;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rid(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 gameType = 4;
  if (this->gametype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gametype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LoginSubGameRequest)
}

::google::protobuf::uint8* LoginSubGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LoginSubGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // int64 rid = 2;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rid(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // int32 gameType = 4;
  if (this->gametype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gametype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LoginSubGameRequest)
  return target;
}

size_t LoginSubGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LoginSubGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 rid = 2;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rid());
  }

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 gameType = 4;
  if (this->gametype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gametype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginSubGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LoginSubGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginSubGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LoginSubGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LoginSubGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LoginSubGameRequest)
    MergeFrom(*source);
  }
}

void LoginSubGameRequest::MergeFrom(const LoginSubGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LoginSubGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.gametype() != 0) {
    set_gametype(from.gametype());
  }
}

void LoginSubGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LoginSubGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSubGameRequest::CopyFrom(const LoginSubGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LoginSubGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSubGameRequest::IsInitialized() const {
  return true;
}

void LoginSubGameRequest::Swap(LoginSubGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginSubGameRequest::InternalSwap(LoginSubGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rid_, other->rid_);
  swap(msgid_, other->msgid_);
  swap(type_, other->type_);
  swap(gametype_, other->gametype_);
}

::google::protobuf::Metadata LoginSubGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginSubGameResponse::InitAsDefaultInstance() {
}
class LoginSubGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginSubGameResponse::kMsgIdFieldNumber;
const int LoginSubGameResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginSubGameResponse::LoginSubGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LoginSubGameResponse)
}
LoginSubGameResponse::LoginSubGameResponse(const LoginSubGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.LoginSubGameResponse)
}

void LoginSubGameResponse::SharedCtor() {
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
}

LoginSubGameResponse::~LoginSubGameResponse() {
  // @@protoc_insertion_point(destructor:GameMessage.LoginSubGameResponse)
  SharedDtor();
}

void LoginSubGameResponse::SharedDtor() {
}

void LoginSubGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginSubGameResponse& LoginSubGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginSubGameResponse_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void LoginSubGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LoginSubGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginSubGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginSubGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // int32 result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginSubGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LoginSubGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LoginSubGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LoginSubGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginSubGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LoginSubGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LoginSubGameResponse)
}

::google::protobuf::uint8* LoginSubGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LoginSubGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LoginSubGameResponse)
  return target;
}

size_t LoginSubGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LoginSubGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginSubGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LoginSubGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginSubGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LoginSubGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LoginSubGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LoginSubGameResponse)
    MergeFrom(*source);
  }
}

void LoginSubGameResponse::MergeFrom(const LoginSubGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LoginSubGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void LoginSubGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LoginSubGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSubGameResponse::CopyFrom(const LoginSubGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LoginSubGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSubGameResponse::IsInitialized() const {
  return true;
}

void LoginSubGameResponse::Swap(LoginSubGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginSubGameResponse::InternalSwap(LoginSubGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msgid_, other->msgid_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata LoginSubGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuitSubGameRequest::InitAsDefaultInstance() {
}
class QuitSubGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitSubGameRequest::kMsgIdFieldNumber;
const int QuitSubGameRequest::kRidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitSubGameRequest::QuitSubGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.QuitSubGameRequest)
}
QuitSubGameRequest::QuitSubGameRequest(const QuitSubGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&rid_)) + sizeof(msgid_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.QuitSubGameRequest)
}

void QuitSubGameRequest::SharedCtor() {
  ::memset(&rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&rid_)) + sizeof(msgid_));
}

QuitSubGameRequest::~QuitSubGameRequest() {
  // @@protoc_insertion_point(destructor:GameMessage.QuitSubGameRequest)
  SharedDtor();
}

void QuitSubGameRequest::SharedDtor() {
}

void QuitSubGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitSubGameRequest& QuitSubGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuitSubGameRequest_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void QuitSubGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.QuitSubGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&rid_)) + sizeof(msgid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitSubGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuitSubGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // int64 rid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_rid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitSubGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.QuitSubGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.QuitSubGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.QuitSubGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitSubGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.QuitSubGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // int64 rid = 2;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.QuitSubGameRequest)
}

::google::protobuf::uint8* QuitSubGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.QuitSubGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // int64 rid = 2;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.QuitSubGameRequest)
  return target;
}

size_t QuitSubGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.QuitSubGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 rid = 2;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rid());
  }

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitSubGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.QuitSubGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitSubGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<QuitSubGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.QuitSubGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.QuitSubGameRequest)
    MergeFrom(*source);
  }
}

void QuitSubGameRequest::MergeFrom(const QuitSubGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.QuitSubGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
}

void QuitSubGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.QuitSubGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitSubGameRequest::CopyFrom(const QuitSubGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.QuitSubGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitSubGameRequest::IsInitialized() const {
  return true;
}

void QuitSubGameRequest::Swap(QuitSubGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitSubGameRequest::InternalSwap(QuitSubGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rid_, other->rid_);
  swap(msgid_, other->msgid_);
}

::google::protobuf::Metadata QuitSubGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuitSubGameResponse::InitAsDefaultInstance() {
}
class QuitSubGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitSubGameResponse::kMsgIdFieldNumber;
const int QuitSubGameResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitSubGameResponse::QuitSubGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.QuitSubGameResponse)
}
QuitSubGameResponse::QuitSubGameResponse(const QuitSubGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.QuitSubGameResponse)
}

void QuitSubGameResponse::SharedCtor() {
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
}

QuitSubGameResponse::~QuitSubGameResponse() {
  // @@protoc_insertion_point(destructor:GameMessage.QuitSubGameResponse)
  SharedDtor();
}

void QuitSubGameResponse::SharedDtor() {
}

void QuitSubGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitSubGameResponse& QuitSubGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuitSubGameResponse_HallLoginMessage_2eproto.base);
  return *internal_default_instance();
}


void QuitSubGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.QuitSubGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitSubGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuitSubGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 msgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_msgid(value);
        break;
      }
      // int32 result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitSubGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.QuitSubGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.QuitSubGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.QuitSubGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitSubGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.QuitSubGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.QuitSubGameResponse)
}

::google::protobuf::uint8* QuitSubGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.QuitSubGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.QuitSubGameResponse)
  return target;
}

size_t QuitSubGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.QuitSubGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitSubGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.QuitSubGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitSubGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<QuitSubGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.QuitSubGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.QuitSubGameResponse)
    MergeFrom(*source);
  }
}

void QuitSubGameResponse::MergeFrom(const QuitSubGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.QuitSubGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void QuitSubGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.QuitSubGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitSubGameResponse::CopyFrom(const QuitSubGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.QuitSubGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitSubGameResponse::IsInitialized() const {
  return true;
}

void QuitSubGameResponse::Swap(QuitSubGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitSubGameResponse::InternalSwap(QuitSubGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msgid_, other->msgid_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata QuitSubGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_HallLoginMessage_2eproto);
  return ::file_level_metadata_HallLoginMessage_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameMessage
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::LoginRequest* Arena::CreateMaybeMessage< ::GameMessage::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::LoginRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::LoginResponse* Arena::CreateMaybeMessage< ::GameMessage::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::LoginResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::QuitRequest* Arena::CreateMaybeMessage< ::GameMessage::QuitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::QuitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::QuitResponse* Arena::CreateMaybeMessage< ::GameMessage::QuitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::QuitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::LoginSubGameRequest* Arena::CreateMaybeMessage< ::GameMessage::LoginSubGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::LoginSubGameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::LoginSubGameResponse* Arena::CreateMaybeMessage< ::GameMessage::LoginSubGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::LoginSubGameResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::QuitSubGameRequest* Arena::CreateMaybeMessage< ::GameMessage::QuitSubGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::QuitSubGameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameMessage::QuitSubGameResponse* Arena::CreateMaybeMessage< ::GameMessage::QuitSubGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMessage::QuitSubGameResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
