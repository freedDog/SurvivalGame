// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: talkbox.proto

#include "talkbox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_talkbox_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_talk_users_talk_user_talkbox_2eproto;
namespace talkbox {
class talk_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<talk_result> _instance;
} _talk_result_default_instance_;
class talk_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<talk_create> _instance;
} _talk_create_default_instance_;
class talk_users_talk_userDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<talk_users_talk_user> _instance;
} _talk_users_talk_user_default_instance_;
class talk_usersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<talk_users> _instance;
} _talk_users_default_instance_;
class talk_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<talk_message> _instance;
} _talk_message_default_instance_;
}  // namespace talkbox
static void InitDefaultstalk_result_talkbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::talkbox::_talk_result_default_instance_;
    new (ptr) ::talkbox::talk_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::talkbox::talk_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_talk_result_talkbox_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstalk_result_talkbox_2eproto}, {}};

static void InitDefaultstalk_create_talkbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::talkbox::_talk_create_default_instance_;
    new (ptr) ::talkbox::talk_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::talkbox::talk_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_talk_create_talkbox_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstalk_create_talkbox_2eproto}, {}};

static void InitDefaultstalk_users_talk_user_talkbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::talkbox::_talk_users_talk_user_default_instance_;
    new (ptr) ::talkbox::talk_users_talk_user();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::talkbox::talk_users_talk_user::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_talk_users_talk_user_talkbox_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstalk_users_talk_user_talkbox_2eproto}, {}};

static void InitDefaultstalk_users_talkbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::talkbox::_talk_users_default_instance_;
    new (ptr) ::talkbox::talk_users();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::talkbox::talk_users::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_talk_users_talkbox_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultstalk_users_talkbox_2eproto}, {
      &scc_info_talk_users_talk_user_talkbox_2eproto.base,}};

static void InitDefaultstalk_message_talkbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::talkbox::_talk_message_default_instance_;
    new (ptr) ::talkbox::talk_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::talkbox::talk_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_talk_message_talkbox_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstalk_message_talkbox_2eproto}, {}};

void InitDefaults_talkbox_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_talk_result_talkbox_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_talk_create_talkbox_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_talk_users_talk_user_talkbox_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_talk_users_talkbox_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_talk_message_talkbox_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_talkbox_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_talkbox_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_talkbox_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_talkbox_2eproto::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_result, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_create, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_create, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_users_talk_user, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_users_talk_user, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_users_talk_user, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_users, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_users, users_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_message, fromuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_message, touserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::talkbox::talk_message, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::talkbox::talk_result)},
  { 6, -1, sizeof(::talkbox::talk_create)},
  { 13, -1, sizeof(::talkbox::talk_users_talk_user)},
  { 20, -1, sizeof(::talkbox::talk_users)},
  { 26, -1, sizeof(::talkbox::talk_message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::talkbox::_talk_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::talkbox::_talk_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::talkbox::_talk_users_talk_user_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::talkbox::_talk_users_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::talkbox::_talk_message_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_talkbox_2eproto = {
  {}, AddDescriptors_talkbox_2eproto, "talkbox.proto", schemas,
  file_default_instances, TableStruct_talkbox_2eproto::offsets,
  file_level_metadata_talkbox_2eproto, 5, file_level_enum_descriptors_talkbox_2eproto, file_level_service_descriptors_talkbox_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_talkbox_2eproto = {
  false, InitDefaults_talkbox_2eproto, 
  "\n\rtalkbox.proto\022\007talkbox\"\031\n\013talk_result\022"
  "\n\n\002id\030\001 \001(\005\"+\n\013talk_create\022\016\n\006userid\030\001 \001"
  "(\005\022\014\n\004name\030\002 \001(\t\"e\n\ntalk_users\022,\n\005users\030"
  "\001 \003(\0132\035.talkbox.talk_users.talk_user\032)\n\t"
  "talk_user\022\016\n\006userid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\""
  "A\n\014talk_message\022\022\n\nfromuserid\030\001 \001(\005\022\020\n\010t"
  "ouserid\030\002 \001(\005\022\013\n\003msg\030\003 \001(\tb\006proto3"
,
  "talkbox.proto", &assign_descriptors_table_talkbox_2eproto, 274,
};

void AddDescriptors_talkbox_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_talkbox_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_talkbox_2eproto = []() { AddDescriptors_talkbox_2eproto(); return true; }();
namespace talkbox {

// ===================================================================

void talk_result::InitAsDefaultInstance() {
}
class talk_result::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_result::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_result::talk_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:talkbox.talk_result)
}
talk_result::talk_result(const talk_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:talkbox.talk_result)
}

void talk_result::SharedCtor() {
  id_ = 0;
}

talk_result::~talk_result() {
  // @@protoc_insertion_point(destructor:talkbox.talk_result)
  SharedDtor();
}

void talk_result::SharedDtor() {
}

void talk_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const talk_result& talk_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_talk_result_talkbox_2eproto.base);
  return *internal_default_instance();
}


void talk_result::Clear() {
// @@protoc_insertion_point(message_clear_start:talkbox.talk_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* talk_result::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<talk_result*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool talk_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:talkbox.talk_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:talkbox.talk_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:talkbox.talk_result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void talk_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:talkbox.talk_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:talkbox.talk_result)
}

::google::protobuf::uint8* talk_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:talkbox.talk_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:talkbox.talk_result)
  return target;
}

size_t talk_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:talkbox.talk_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void talk_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:talkbox.talk_result)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_result* source =
      ::google::protobuf::DynamicCastToGenerated<talk_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:talkbox.talk_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:talkbox.talk_result)
    MergeFrom(*source);
  }
}

void talk_result::MergeFrom(const talk_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:talkbox.talk_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void talk_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:talkbox.talk_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_result::CopyFrom(const talk_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:talkbox.talk_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_result::IsInitialized() const {
  return true;
}

void talk_result::Swap(talk_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_result::InternalSwap(talk_result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata talk_result::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_talkbox_2eproto);
  return ::file_level_metadata_talkbox_2eproto[kIndexInFileMessages];
}


// ===================================================================

void talk_create::InitAsDefaultInstance() {
}
class talk_create::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_create::kUseridFieldNumber;
const int talk_create::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_create::talk_create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:talkbox.talk_create)
}
talk_create::talk_create(const talk_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:talkbox.talk_create)
}

void talk_create::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_talk_create_talkbox_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

talk_create::~talk_create() {
  // @@protoc_insertion_point(destructor:talkbox.talk_create)
  SharedDtor();
}

void talk_create::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void talk_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const talk_create& talk_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_talk_create_talkbox_2eproto.base);
  return *internal_default_instance();
}


void talk_create::Clear() {
// @@protoc_insertion_point(message_clear_start:talkbox.talk_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* talk_create::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<talk_create*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 userid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("talkbox.talk_create.name");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool talk_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:talkbox.talk_create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "talkbox.talk_create.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:talkbox.talk_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:talkbox.talk_create)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void talk_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:talkbox.talk_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "talkbox.talk_create.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:talkbox.talk_create)
}

::google::protobuf::uint8* talk_create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:talkbox.talk_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "talkbox.talk_create.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:talkbox.talk_create)
  return target;
}

size_t talk_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:talkbox.talk_create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void talk_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:talkbox.talk_create)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_create* source =
      ::google::protobuf::DynamicCastToGenerated<talk_create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:talkbox.talk_create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:talkbox.talk_create)
    MergeFrom(*source);
  }
}

void talk_create::MergeFrom(const talk_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:talkbox.talk_create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void talk_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:talkbox.talk_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_create::CopyFrom(const talk_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:talkbox.talk_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_create::IsInitialized() const {
  return true;
}

void talk_create::Swap(talk_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_create::InternalSwap(talk_create* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata talk_create::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_talkbox_2eproto);
  return ::file_level_metadata_talkbox_2eproto[kIndexInFileMessages];
}


// ===================================================================

void talk_users_talk_user::InitAsDefaultInstance() {
}
class talk_users_talk_user::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_users_talk_user::kUseridFieldNumber;
const int talk_users_talk_user::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_users_talk_user::talk_users_talk_user()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:talkbox.talk_users.talk_user)
}
talk_users_talk_user::talk_users_talk_user(const talk_users_talk_user& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:talkbox.talk_users.talk_user)
}

void talk_users_talk_user::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_talk_users_talk_user_talkbox_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

talk_users_talk_user::~talk_users_talk_user() {
  // @@protoc_insertion_point(destructor:talkbox.talk_users.talk_user)
  SharedDtor();
}

void talk_users_talk_user::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void talk_users_talk_user::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const talk_users_talk_user& talk_users_talk_user::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_talk_users_talk_user_talkbox_2eproto.base);
  return *internal_default_instance();
}


void talk_users_talk_user::Clear() {
// @@protoc_insertion_point(message_clear_start:talkbox.talk_users.talk_user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* talk_users_talk_user::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<talk_users_talk_user*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 userid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("talkbox.talk_users.talk_user.name");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool talk_users_talk_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:talkbox.talk_users.talk_user)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "talkbox.talk_users.talk_user.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:talkbox.talk_users.talk_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:talkbox.talk_users.talk_user)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void talk_users_talk_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:talkbox.talk_users.talk_user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "talkbox.talk_users.talk_user.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:talkbox.talk_users.talk_user)
}

::google::protobuf::uint8* talk_users_talk_user::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:talkbox.talk_users.talk_user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "talkbox.talk_users.talk_user.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:talkbox.talk_users.talk_user)
  return target;
}

size_t talk_users_talk_user::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:talkbox.talk_users.talk_user)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void talk_users_talk_user::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:talkbox.talk_users.talk_user)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_users_talk_user* source =
      ::google::protobuf::DynamicCastToGenerated<talk_users_talk_user>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:talkbox.talk_users.talk_user)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:talkbox.talk_users.talk_user)
    MergeFrom(*source);
  }
}

void talk_users_talk_user::MergeFrom(const talk_users_talk_user& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:talkbox.talk_users.talk_user)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void talk_users_talk_user::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:talkbox.talk_users.talk_user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_users_talk_user::CopyFrom(const talk_users_talk_user& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:talkbox.talk_users.talk_user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_users_talk_user::IsInitialized() const {
  return true;
}

void talk_users_talk_user::Swap(talk_users_talk_user* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_users_talk_user::InternalSwap(talk_users_talk_user* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata talk_users_talk_user::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_talkbox_2eproto);
  return ::file_level_metadata_talkbox_2eproto[kIndexInFileMessages];
}


// ===================================================================

void talk_users::InitAsDefaultInstance() {
}
class talk_users::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_users::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_users::talk_users()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:talkbox.talk_users)
}
talk_users::talk_users(const talk_users& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:talkbox.talk_users)
}

void talk_users::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_talk_users_talkbox_2eproto.base);
}

talk_users::~talk_users() {
  // @@protoc_insertion_point(destructor:talkbox.talk_users)
  SharedDtor();
}

void talk_users::SharedDtor() {
}

void talk_users::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const talk_users& talk_users::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_talk_users_talkbox_2eproto.base);
  return *internal_default_instance();
}


void talk_users::Clear() {
// @@protoc_insertion_point(message_clear_start:talkbox.talk_users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* talk_users::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<talk_users*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // repeated .talkbox.talk_users.talk_user users = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::talkbox::talk_users_talk_user::_InternalParse;
          object = msg->add_users();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool talk_users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:talkbox.talk_users)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .talkbox.talk_users.talk_user users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:talkbox.talk_users)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:talkbox.talk_users)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void talk_users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:talkbox.talk_users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .talkbox.talk_users.talk_user users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:talkbox.talk_users)
}

::google::protobuf::uint8* talk_users::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:talkbox.talk_users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .talkbox.talk_users.talk_user users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:talkbox.talk_users)
  return target;
}

size_t talk_users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:talkbox.talk_users)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .talkbox.talk_users.talk_user users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void talk_users::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:talkbox.talk_users)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_users* source =
      ::google::protobuf::DynamicCastToGenerated<talk_users>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:talkbox.talk_users)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:talkbox.talk_users)
    MergeFrom(*source);
  }
}

void talk_users::MergeFrom(const talk_users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:talkbox.talk_users)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void talk_users::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:talkbox.talk_users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_users::CopyFrom(const talk_users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:talkbox.talk_users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_users::IsInitialized() const {
  return true;
}

void talk_users::Swap(talk_users* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_users::InternalSwap(talk_users* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
}

::google::protobuf::Metadata talk_users::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_talkbox_2eproto);
  return ::file_level_metadata_talkbox_2eproto[kIndexInFileMessages];
}


// ===================================================================

void talk_message::InitAsDefaultInstance() {
}
class talk_message::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_message::kFromuseridFieldNumber;
const int talk_message::kTouseridFieldNumber;
const int talk_message::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_message::talk_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:talkbox.talk_message)
}
talk_message::talk_message(const talk_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&fromuserid_, &from.fromuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&touserid_) -
    reinterpret_cast<char*>(&fromuserid_)) + sizeof(touserid_));
  // @@protoc_insertion_point(copy_constructor:talkbox.talk_message)
}

void talk_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_talk_message_talkbox_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touserid_) -
      reinterpret_cast<char*>(&fromuserid_)) + sizeof(touserid_));
}

talk_message::~talk_message() {
  // @@protoc_insertion_point(destructor:talkbox.talk_message)
  SharedDtor();
}

void talk_message::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void talk_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const talk_message& talk_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_talk_message_talkbox_2eproto.base);
  return *internal_default_instance();
}


void talk_message::Clear() {
// @@protoc_insertion_point(message_clear_start:talkbox.talk_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touserid_) -
      reinterpret_cast<char*>(&fromuserid_)) + sizeof(touserid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* talk_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<talk_message*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 fromuserid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_fromuserid(value);
        break;
      }
      // int32 touserid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_touserid(value);
        break;
      }
      // string msg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("talkbox.talk_message.msg");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_msg();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool talk_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:talkbox.talk_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fromuserid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 touserid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &touserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "talkbox.talk_message.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:talkbox.talk_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:talkbox.talk_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void talk_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:talkbox.talk_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fromuserid = 1;
  if (this->fromuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromuserid(), output);
  }

  // int32 touserid = 2;
  if (this->touserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->touserid(), output);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "talkbox.talk_message.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:talkbox.talk_message)
}

::google::protobuf::uint8* talk_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:talkbox.talk_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fromuserid = 1;
  if (this->fromuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromuserid(), target);
  }

  // int32 touserid = 2;
  if (this->touserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->touserid(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "talkbox.talk_message.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:talkbox.talk_message)
  return target;
}

size_t talk_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:talkbox.talk_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 fromuserid = 1;
  if (this->fromuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fromuserid());
  }

  // int32 touserid = 2;
  if (this->touserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->touserid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void talk_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:talkbox.talk_message)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_message* source =
      ::google::protobuf::DynamicCastToGenerated<talk_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:talkbox.talk_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:talkbox.talk_message)
    MergeFrom(*source);
  }
}

void talk_message::MergeFrom(const talk_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:talkbox.talk_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.fromuserid() != 0) {
    set_fromuserid(from.fromuserid());
  }
  if (from.touserid() != 0) {
    set_touserid(from.touserid());
  }
}

void talk_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:talkbox.talk_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_message::CopyFrom(const talk_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:talkbox.talk_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_message::IsInitialized() const {
  return true;
}

void talk_message::Swap(talk_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_message::InternalSwap(talk_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fromuserid_, other->fromuserid_);
  swap(touserid_, other->touserid_);
}

::google::protobuf::Metadata talk_message::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_talkbox_2eproto);
  return ::file_level_metadata_talkbox_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace talkbox
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::talkbox::talk_result* Arena::CreateMaybeMessage< ::talkbox::talk_result >(Arena* arena) {
  return Arena::CreateInternal< ::talkbox::talk_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::talkbox::talk_create* Arena::CreateMaybeMessage< ::talkbox::talk_create >(Arena* arena) {
  return Arena::CreateInternal< ::talkbox::talk_create >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::talkbox::talk_users_talk_user* Arena::CreateMaybeMessage< ::talkbox::talk_users_talk_user >(Arena* arena) {
  return Arena::CreateInternal< ::talkbox::talk_users_talk_user >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::talkbox::talk_users* Arena::CreateMaybeMessage< ::talkbox::talk_users >(Arena* arena) {
  return Arena::CreateInternal< ::talkbox::talk_users >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::talkbox::talk_message* Arena::CreateMaybeMessage< ::talkbox::talk_message >(Arena* arena) {
  return Arena::CreateInternal< ::talkbox::talk_message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
